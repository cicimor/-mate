import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
URL = "https://api.hashmate-bot.com/v1/mining/pools"
URLTG = "https://web.telegram.org/a/"  
JSON_FILE = "data.json"
INTERVAL = 600  # 30 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É
options = webdriver.ChromeOptions()
options.debugger_address = "localhost:9222"  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É Chrome
driver = webdriver.Chrome(options=options)

def load_existing_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å."""
    try:
        with open(JSON_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON."""
    with open(JSON_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def scrape_data():
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        driver.get(URL)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç
        time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏

        pre_element = driver.find_element(By.TAG_NAME, "pre")
        raw_data = pre_element.text  # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ <pre>

        return json.loads(raw_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ JSON
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return []
    



def refresh_page():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    driver.refresh()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    time.sleep(3)  # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    while True:
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        refresh_page()

        existing_data = load_existing_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        new_data = scrape_data()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ä—ã–º–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        existing_block_numbers = {item["lastBlockNumber"] for item in existing_data}
        for entry in new_data:
            
            if isinstance(entry, dict):  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ entry ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
             if entry["lastBlockNumber"] not in existing_block_numbers:
                if entry["lastBlockNumber"] not in existing_block_numbers:
                 existing_data.append(entry)
            else:
                print("entry –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º:", entry)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        save_data(existing_data)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {INTERVAL // 60} –º–∏–Ω—É—Ç.")

        
        # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º
        time.sleep(INTERVAL)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("‚õî –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        driver.quit()